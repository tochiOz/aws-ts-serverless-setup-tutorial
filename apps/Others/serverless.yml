org: tochinny
app: awssetup
service: others
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    ACCOUNT_ID: ${env:ACCOUNT_ID}
    NODE_ENV: ${self:provider.stage}
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  httpApi:
    cors: true
  deploymentBucket:
    name: s3-${self:provider.stage}-${self:provider.region}.${env:ACCOUNT_ID}.deploys.${self:service}

plugins:
  - serverless-plugin-typescript
  # - serverless-dynamodb
  - serverless-offline
  # - serverless-plugin-scripts

custom:
  defaultStage: ${opt:stage, 'dev'}
  # webpack:
  #     webpackConfig: ./webpack.config.js
  #     includeModules: true
  # dynamodb:
  #     stages:
  #         - dev
  #     start:
  #         port: 8000
  #         inMemory: true
  #         migrate: true
  #     migration:
  #         dir: offline/db/migrations
  # scripts:
  #   hooks:
  #     'aws:common:validate:validate': npm run test
  # serverless-offline:
  #   ignoreJWTSignature: true
  #   httpPort: 3001
  #   websocketPort: 4001
  #   lambdaPort: 5001

# functions
functions:
  hello:
    handler: src/hello.handler
    events: # The events that trigger this function
      - http: 
          path: awsnodetypescriptsetup/hello
          method: get
  goodbye:
    handler: src/goodbye.handler
    events:
      - http: 
          path: awsnodetypescriptsetup/goodbye
          method: post
  question:
    handler: src/question.handler
    events:
      - sns:
          arn:
            Fn::ImportValue: ${self:provider.region}.${env:ACCOUNT_ID}.sns.messaging

# Resources your functions use
resources:
  Resources:
    # SNS Topics
    SNSHelloEvent:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Hello Event Topic
        TopicName: hello-event
